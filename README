### First Reader-Writer Problem ###
This is a solution to the first reader-writer problem implemented in C with
mutex locks, semaphores, and shared memory representing the file.

## Assumptions and problem definitions ##
* Readers and writers need to access a file which will be represented by shared
  memory.
* The "file" will be referred to as "the space" or "the file".
* Only one writer can write to the space at a time, during which, no readers
  may be reading (as they may be reading incomplete data).
* Since readers don't modify the data, multiple readers may access the space at
  one time.

## Implications ##
* A writer that never stops writing will starve the readers.
* If a reader is reading and another reader enters, it will begin reading
  regardless of whether a writer is waiting. This results in starvation of
  writers.

## A few comments ##
* Since shared memory (and files) are available to all processes, this could be
  implemented with interprocess communication, but since multi-threading is
  easier, I am using threads instead.
* I could have each thread access an actual file, but with shared memory, it's
  easier to demonstrate exactly where the threads are writing too. Also, I'm
  not sure if the file I/O libraries or operating system do any concurrency of
  their own. With shared memory, there is none.
* To describe what's going on, I've added print statements to print to stdout.
  These aren't synchronized, so some concurrency issues will occure there, but
  it doesn't affect or reflect any issues in the reader writer solution.

## The Solution ##
Code:
mutex rw    # lock for both readers and writers
mutex r     # lock for readers
int rc=0    # number of readers reading
writer() {
    lock(rw)
    <write>
    unlock(rw)
}
reader() {
    lock(r)
    if (rc++==0)
        lock(rw)
    unlock(r)
    <read>
    lock(r)
    if (--rc==0)
        unlock(rw)
    unlock(r)
}

## The Makefile ##
make [all]      : Creates executable, soln
make test       : Creates debug executable, dsoln
make pkg        : Creates a tar with files for submission
make clean      : Cleans
